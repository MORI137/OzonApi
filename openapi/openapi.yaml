openapi: 3.0.3
info:
  title: OZON Marketplace API
  description: API for managing products, users, orders, and categories in the OZON marketplace.
  version: 1.0.0
servers:
  - url: https://ozon.api/v1
tags:
  - name: product
    description: Operations related to products
  - name: user
    description: Operations related to users

paths:
  /product:
    get:
      tags:
        - product
      summary: Retrieve all products
      description: Get a list of all products with optional filtering and pagination.
      operationId: getProducts
      parameters:
        - name: categoryId
          in: query
          description: Filter by category ID
          required: false
          schema:
            type: string
        - name: available
          in: query
          description: Filter by availability
          required: false
          schema:
            type: boolean
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
    post:
      tags:
        - product
      summary: Create a new product
      description: Create a product. Only accessible to sellers.
      operationId: createProduct
      requestBody:
        description: Product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input

  /product/{productId}:
    get:
      tags:
        - product
      summary: Retrieve product by ID
      description: Get details of a product by its ID.
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update a product by ID. Only accessible to sellers.
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '404':
          description: Product not found
    delete:
      tags:
        - product
      summary: Delete a product
      description: Delete a product by ID. Only accessible to sellers and administrators.
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

  /user:
    get:
      tags:
        - user
      summary: Retrieve all users
      description: Get a list of all users with optional filtering and pagination. Only accessible to administrators.
      operationId: getUsers
      parameters:
        - name: type
          in: query
          description: Filter by user type (buyer, seller, admin)
          required: false
          schema:
            type: string
            enum: [buyer, seller, admin]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    post:
      tags:
        - user
      summary: Register a new user
      description: Create a new user account. Accessible to all.
      operationId: createUser
      requestBody:
        description: User details for registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /user/{userId}:
    get:
      tags:
        - user
      summary: Retrieve user by ID
      description: Get details of a user by their ID. Accessible to administrators or the user themselves.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user details
      description: Update user information by ID. Accessible to administrators or the user themselves.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '403':
          description: Forbidden
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete a user
      description: Delete a user account by ID. Only accessible to administrators.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '403':
          description: Forbidden
        '404':
          description: User not found

  /order:
    get:
      tags:
        - order
      summary: Retrieve all orders
      description: Get a list of all orders with optional filtering and pagination.
      operationId: getOrders
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          required: false
          schema:
            type: string
        - name: orderStatus
          in: query
          description: Filter by order status (оформлен, отправлен, доставлен, отменён)
          required: false
          schema:
            type: string
            enum: [оформлен, отправлен, доставлен, отменён]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error
    post:
      tags:
        - order
      summary: Create a new order
      description: Create a new order. Accessible to users.
      operationId: createOrder
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input

  /order/{orderId}:
    get:
      tags:
        - order
      summary: Retrieve order by ID
      description: Get details of an order by its ID.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an order by ID. Accessible to administrators or the user who created the order.
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: string
      requestBody:
        description: Updated order details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '404':
          description: Order not found
    delete:
      tags:
        - order
      summary: Delete an order
      description: Delete an order by ID. Accessible to administrators.
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found

  /order/{orderId}/items:
    get:
      tags:
        - order
      summary: Retrieve all items of a specific order
      description: Get the list of items in an order by order ID.
      operationId: getOrderItems
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve items for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of items in the order retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '404':
          description: Order not found
    post:
      tags:
        - order
      summary: Add an item to an order
      description: Add a new item to an order. Accessible to sellers and administrators.
      operationId: createOrderItem
      parameters:
        - name: orderId
          in: path
          description: ID of the order to add the item to
          required: true
          schema:
            type: string
      requestBody:
        description: Order item details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
      responses:
        '201':
          description: Order item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid input

  /orderItem/{orderItemId}:
    delete:
      tags:
        - order
      summary: Delete an item from an order
      description: Remove an item from an order by item ID. Accessible to sellers and administrators.
      operationId: deleteOrderItem
      parameters:
        - name: orderItemId
          in: path
          description: ID of the order item to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order item deleted successfully
        '404':
          description: Order item not found

  /category:
    get:
      tags:
        - category
      summary: Retrieve all categories
      description: Get a list of all categories with optional filtering and pagination.
      operationId: getCategories
      parameters:
        - name: parentId
          in: query
          description: Filter categories by parent category ID to get subcategories.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter categories by name (partial match).
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of categories retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
    post:
      tags:
        - category
      summary: Create a new category
      description: Create a new category. Accessible to administrators.
      operationId: createCategory
      requestBody:
        description: Category details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input.

  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Retrieve category by ID
      description: Get details of a category by its ID.
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
    put:
      tags:
        - category
      summary: Update an existing category
      description: Update a category by ID. Accessible to administrators.
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated category details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input.
        '404':
          description: Category not found.
    delete:
      tags:
        - category
      summary: Delete a category
      description: Delete a category by ID. Accessible to administrators.
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully.
        '404':
          description: Category not found.

  /review:
    get:
      tags:
        - review
      summary: Retrieve all reviews
      description: Get a list of all reviews with optional filtering and pagination.
      operationId: getReviews
      parameters:
        - name: productId
          in: query
          description: Filter reviews by product ID.
          required: false
          schema:
            type: string
        - name: userId
          in: query
          description: Filter reviews by user ID.
          required: false
          schema:
            type: string
        - name: rating
          in: query
          description: Filter reviews by rating (1-5).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: comment
          in: query
          description: Filter reviews by comment (partial match).
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of reviews retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '500':
          description: Internal server error
    post:
      tags:
        - review
      summary: Create a new review
      description: Create a new review for a product. Accessible to users.
      operationId: createReview
      requestBody:
        description: Review details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input.

  /review/{reviewId}:
    get:
      tags:
        - review
      summary: Retrieve review by ID
      description: Get details of a review by its ID.
      operationId: getReviewById
      parameters:
        - name: reviewId
          in: path
          description: ID of the review to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found.
    put:
      tags:
        - review
      summary: Update an existing review
      description: Update a review by ID. Accessible to the user who created the review.
      operationId: updateReview
      parameters:
        - name: reviewId
          in: path
          description: ID of the review to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated review details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input.
        '404':
          description: Review not found.
    delete:
      tags:
        - review
      summary: Delete a review
      description: Delete a review by ID. Accessible to the user who created the review.
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          description: ID of the review to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Review deleted successfully.
        '404':
          description: Review not found.

  /payment:
    get:
      tags:
        - payment
      summary: Retrieve all payments
      description: Get a list of all payments with optional filtering and pagination.
      operationId: getPayments
      parameters:
        - name: orderId
          in: query
          description: Filter payments by order ID.
          required: false
          schema:
            type: string
        - name: paymentMethod
          in: query
          description: Filter payments by payment method.
          required: false
          schema:
            type: string
        - name: paymentStatus
          in: query
          description: Filter payments by payment status (e.g., pending, completed, failed).
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of payments retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '500':
          description: Internal server error
    post:
      tags:
        - payment
      summary: Create a new payment
      description: Create a new payment record for an order.
      operationId: createPayment
      requestBody:
        description: Payment details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Payment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input.

  /payment/{paymentId}:
    get:
      tags:
        - payment
      summary: Retrieve payment by ID
      description: Get details of a payment by its ID.
      operationId: getPaymentById
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found.
    put:
      tags:
        - payment
      summary: Update an existing payment
      description: Update payment details by ID. Accessible to administrators.
      operationId: updatePayment
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated payment details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Payment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input.
        '404':
          description: Payment not found.
    delete:
      tags:
        - payment
      summary: Delete a payment
      description: Delete a payment by ID. Accessible to administrators.
      operationId: deletePayment
      parameters:
        - name: paymentId
          in: path
          description: ID of the payment to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Payment deleted successfully.
        '404':
          description: Payment not found.

  /seller:
    get:
      tags:
        - seller
      summary: Retrieve all sellers
      description: Get a list of all sellers with optional filtering and pagination.
      operationId: getSellers
      parameters:
        - name: storeName
          in: query
          description: Filter sellers by store name (partial match).
          required: false
          schema:
            type: string
        - name: rating
          in: query
          description: Filter sellers by rating (e.g., 1–5).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of sellers retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Seller'
        '500':
          description: Internal server error
    post:
      tags:
        - seller
      summary: Create a new seller
      description: Create a new seller record.
      operationId: createSeller
      requestBody:
        description: Seller details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
      responses:
        '201':
          description: Seller created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '400':
          description: Invalid input.

  /seller/{sellerId}:
    get:
      tags:
        - seller
      summary: Retrieve seller by ID
      description: Get details of a seller by their ID.
      operationId: getSellerById
      parameters:
        - name: sellerId
          in: path
          description: ID of the seller to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Seller details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '404':
          description: Seller not found.
    put:
      tags:
        - seller
      summary: Update an existing seller
      description: Update seller details by ID. Accessible to administrators.
      operationId: updateSeller
      parameters:
        - name: sellerId
          in: path
          description: ID of the seller to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated seller details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
      responses:
        '200':
          description: Seller updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '400':
          description: Invalid input.
        '404':
          description: Seller not found.
    delete:
      tags:
        - seller
      summary: Delete a seller
      description: Delete a seller by ID. Accessible to administrators.
      operationId: deleteSeller
      parameters:
        - name: sellerId
          in: path
          description: ID of the seller to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Seller deleted successfully.
        '404':
          description: Seller not found.

components:
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
        order_id:
          type: string
        amount:
          type: number
          format: float
        payment_method:
          type: string
        payment_status:
          type: string
    Seller:
      type: object
      properties:
        id:
          type: string
        store_name:
          type: string
        seller_id:
          type: string
        rating:
          type: number
          format: float
          minimum: 1
          maximum: 5

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        parent_id:
          type: string
          nullable: true
    Review:
      type: object
      properties:
        id:
          type: string
        product_id:
          type: string
        user_id:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string

    Order:
      type: object
      properties:
        order_number:
          type: string
        user_id:
          type: string
        order_date:
          type: string
          format: date
        total_price:
          type: number
          format: float
        order_status:
          type: string
          enum: [оформлен, отправлен, доставлен, отменён]
          
    OrderItem:
      type: object
      properties:
        order_id:
          type: string
        product_id:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
          format: float

    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        sellerId:
          type: string
        price:
          type: number
          description: Price of the product
        categoryId:
          type: string
          description: ID of the category the product belongs to
        available:
          type: boolean
          description: Availability status of the product
        createdAt:
          type: string
          format: date-time
          description: Date and time when the product was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the product was last updated
      required:
        - name
        - price
        - categoryId
        - available

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        type:
          type: string
          description: Type of user
          enum: [buyer, seller, admin]
        address:
          type: string
          description: Delivery address for the user
        createdAt:
          type: string
          format: date-time
          description: Date and time when the user account was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the user account was last updated
      required:
        - name
        - email
        - type

     
